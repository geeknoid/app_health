use crate::Attribute;
use crate::Health;
use core::fmt::Display;
use core::hash::{Hash, Hasher};
use std::sync::Arc;

/// A signal from a publisher that indicates its health with associated attributes.
///
/// A signal consists of a [`Health`] and a set of attributes which are name/value pairs that
/// provide context such as the reason for the health state, the network endpoint being called,
/// etc.
///
/// Publisher signals are generated by functions such as [`nominal`](crate::Publisher::nominal) and
/// [`degraded`](crate::Publisher::degraded) on a [`Publisher`](crate::Publisher).
#[derive(Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Signal {
    state: Health,
    attributes: Arc<[Attribute]>,
}

impl Signal {
    pub(crate) fn new(state: Health, attributes: impl IntoIterator<Item = impl Into<Attribute>>) -> Self {
        let mut v: Vec<Attribute> = attributes.into_iter().map(Into::into).collect();

        v.sort_by(|x, y| x.name().cmp(y.name()));

        Self {
            state,
            attributes: Arc::from(v),
        }
    }

    pub(crate) fn nominal() -> Self {
        Self {
            state: Health::Nominal,
            attributes: Arc::default(),
        }
    }

    /// The health state indicated by this signal.
    #[must_use]
    pub const fn state(&self) -> Health {
        self.state
    }

    /// The attributes associated with this signal.
    #[must_use]
    pub fn attributes(&self) -> &[Attribute] {
        &self.attributes
    }
}

impl Hash for Signal {
    fn hash<H: Hasher>(&self, state: &mut H) {
        for a in self.attributes.iter() {
            a.hash(state);
        }
    }
}

impl Eq for Signal {}

impl Display for Signal {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        write!(f, "{}, [", self.state)?;
        if !self.attributes.is_empty() {
            for attr in self.attributes.iter() {
                write!(f, "{attr}, ")?;
            }
        }
        write!(f, "]")?;

        Ok(())
    }
}
